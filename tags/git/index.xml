<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Learn, Converse, Share</title><link>http://jmeridth.com/tags/git/</link><description>Recent content in Git on Learn, Converse, Share</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 04 Jul 2016 20:52:00 -0500</lastBuildDate><atom:link href="http://jmeridth.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Repository Root Path</title><link>http://jmeridth.com/posts/get-repository-root-path/</link><pubDate>Mon, 04 Jul 2016 20:52:00 -0500</pubDate><guid>http://jmeridth.com/posts/get-repository-root-path/</guid><description>I needed to find a way to get the path to the root of my Git repository. I found the answer in the following command:
git rev-parse --show-toplevel
Example:
-&amp;gt;$ git rev-parse --show-toplevel /Users/jmeridth/dev/jmeridth.github.io</description></item><item><title>When Git or SSH Protocols Blocked</title><link>http://jmeridth.com/posts/when-git-or-ssh-protocols-blocked/</link><pubDate>Tue, 26 Aug 2014 08:47:42 -0500</pubDate><guid>http://jmeridth.com/posts/when-git-or-ssh-protocols-blocked/</guid><description>Recently I had issues connecting to Github because of some firewall restrictions outside my control. The firewall had outbound SSH (port 22) blocked. My co-worker Justin Hammond found a git config option that lets you force all git commands to use https:// (port 443) instead of ssh:// (port 22).
git config --global url.&amp;#34;https://&amp;#34;.insteadOf git:// Worked like a charm. Thanks Justin. Hope this helps someone else.
NB: Don&amp;rsquo;t use --global if you don&amp;rsquo;t want this applied to all repositories.</description></item><item><title>How to Get The SHA of The Last Commit on a Branch With Git</title><link>http://jmeridth.com/posts/how-to-get-the-sha-of-the-last-commit-on-a-branch-with-git/</link><pubDate>Tue, 11 Mar 2014 02:30:23 -0500</pubDate><guid>http://jmeridth.com/posts/how-to-get-the-sha-of-the-last-commit-on-a-branch-with-git/</guid><description>I&amp;rsquo;ve been asked this a few times and have had to do it lately a few times.
To get the SHA of the last commit from a specific branch, use git rev-parse
git rev-parse origin/master (remote branch)
or
git rev-parse master (local branch)</description></item><item><title>Use Git Grep to Replace Strings in Files in Your Git Repository</title><link>http://jmeridth.com/posts/use-git-grep-to-replace-strings-in-files-in-your-git-repository/</link><pubDate>Mon, 11 Feb 2013 00:00:00 -0600</pubDate><guid>http://jmeridth.com/posts/use-git-grep-to-replace-strings-in-files-in-your-git-repository/</guid><description>TL;DR
On Linux:
git grep -l &amp;#39;original_text&amp;#39; | xargs sed -i &amp;#39;s/original_text/new_text/g&amp;#39; On Mac:
git grep -l &amp;#39;original_text&amp;#39; | xargs sed -i &amp;#39;&amp;#39; -e &amp;#39;s/original_text/new_text/g&amp;#39; I needed to change a string in a bunch of files and I used the command above using git grep to do it. Worked like a charm.
The -l argument to git grep only returns the file names and not the location in the file like it usually does.</description></item><item><title>Using Latest Version of Git on Ubuntu</title><link>http://jmeridth.com/posts/using-latest-version-of-git-on-ubuntu/</link><pubDate>Wed, 11 Jul 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/using-latest-version-of-git-on-ubuntu/</guid><description>Whenever you do
sudo apt-get install git-core on Ubuntu you will only get git version 1.7.5.x. I needed 1.7.6%2B.
To do this you have to run the following commands:
sudo apt-get install software-properties-common python-software-properties sudo add-apt-repository ppa:git-core/ppa sudo apt-get update sudo apt-get install git-core This should give you git version 1.7.11 (as of today)</description></item><item><title>Automatically Execute Mistyped Git Commands</title><link>http://jmeridth.com/posts/automatically-execute-mistyped-git-commands/</link><pubDate>Tue, 22 May 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/automatically-execute-mistyped-git-commands/</guid><description>I use the command line with Git. I do this because I type faster than I use my mouse. It is a personal preference. Due to this, I sometimes fat finger Git commands. Yeah, it does happen. For example, I can type:
git chekcout -b new_branch_name Notice the checkout command is mistyped (kc instead of ck). I misspell that and branch (usually brnach) often. Git will usually give notice this and give you a suggestion on which command you might have meant.</description></item><item><title>Git and Seeting What Commits Are Not In Another Branch</title><link>http://jmeridth.com/posts/git-and-seeing-what-commits-are-not-in-another-branch/</link><pubDate>Tue, 22 May 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-and-seeing-what-commits-are-not-in-another-branch/</guid><description>A common question I get from co-workers is, “How do I see if I already merged my changes into my master branch?”. My usual suggestion was to use git diffbut I've started telling them to look atgit cherry` (NOT git-cherry-pick).
From the new Git documentation, git-cherry finds commits not merged upstream.
I use it like this while on the master branch to see what commits are in master that are not on the feature-branch-name branch:</description></item><item><title>Do Not Issue Pull Requests From Your Master Branch</title><link>http://jmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/</link><pubDate>Fri, 30 Mar 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/</guid><description>PROBLEM: You do not want to issue pull requests from your fork’s master branch on Github.com to the parent repository because any new changes you add to the master branch will automatically show up in the pull request. That means changes you did not intend to be there, would now be there.
SOLUTION: Issue your pull requests from a feature/topic branch
BAD SCENARIO:
Fork repo ABC Clone it locally (git clone git@github.</description></item><item><title>git clone --mirror vs git clone --bare</title><link>http://jmeridth.com/posts/git-clone-mirror-vs-git-clone-bare/</link><pubDate>Fri, 30 Mar 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-clone-mirror-vs-git-clone-bare/</guid><description>I setup GitWeb at work recently. It is very fast and extremely useful. I noticed that the repositories the web view was looking at didn’t show acategory or other branches. Only the master branch. I had used
git clone --bare git@host:repository.git to get the code. This ensures that no working directory is created. Pretty much only the contents of the .git directory. In order to get the .git directory but also acategory, non-master branches, etc, I learned to use:</description></item><item><title>Git Achievements on Windows (Part 3)</title><link>http://jmeridth.com/posts/git-achievements-on-windows-part-2/</link><pubDate>Wed, 21 Mar 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-achievements-on-windows-part-2/</guid><description>Part 1
I’m using Msysgit Bash CLI (up-to-date install instructions
I’ve forked the git-achievements github repository
notice it forks to a gh-pages branch, not a master branch
this allows github to fire jekyll off against your github account and generate your git-achievements page
jasonmeridth@JASON-LAPTOP /c/code $ git clone git@github.com:jmeridth/git-achievments.git Cloning into git-achievements... remote: Counting objects: 1168, done. remote: Compressing objects: 100% (742/742), done. Receiving objects: 91% (1063/1168) Receiving objects: 100% (1168/1168), 155.</description></item><item><title>Git-Achievements on Windows</title><link>http://jmeridth.com/posts/git-achievements-on-windows/</link><pubDate>Sat, 25 Sep 2010 02:30:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-achievements-on-windows/</guid><description>UPDATE: _Needed to add newly clone git-achievements to your PATH env variable. Otherwise it will push an index.html file to your current repo and not the git-achievements repo. Thank you Adam_ for finding that.
IMPORTANT: Make sure you save your ~/.git-achievements-action.log and ~/.git-achievements.log files if you are transferring from your primary machine. If you make these files mobile you will be able to use multiple machines. I forgot mine and now have to start over with git-achievements.</description></item><item><title>Gotcha with Gitosis and python-setuptools</title><link>http://jmeridth.com/posts/gotcha-with-gitosis-and-python-setuptools/</link><pubDate>Wed, 26 May 2010 04:58:00 -0500</pubDate><guid>http://jmeridth.com/posts/gotcha-with-gitosis-and-python-setuptools/</guid><description>Today I decided to upgrade my slicehost slice from Intrepid Ibex to Lucid Lynx (Intrepid → Jaunty → Karmic → Lucid). Yeah, yeah, I’m a little behind. Anyways, It upgraded just fine. However when I was trying to push code to my gitosis instance (which I installed over a year ago), I got the following stack trace:
~/code/gitosis-admin(master) &amp;gt; git pull origin master /usr/bin/gitosis-serve:5: UserWarning: Unbuild egg for setuptools [unknown version] (/usr/lib/python2.</description></item><item><title>Gitosis and Gitweb - Part 3</title><link>http://jmeridth.com/posts/gitosis-and-gitweb-part-3/</link><pubDate>Wed, 26 May 2010 04:45:00 -0500</pubDate><guid>http://jmeridth.com/posts/gitosis-and-gitweb-part-3/</guid><description>Gitosis and Gitweb – Part 1
Gitosis and Gitweb – Part 2
So we are setup, have a project, and have contributors via the first 2 parts.
I know that we are all enamored by the UI of GitHub.com. I am. Unfortunately you can’t get private repositories for free (In all fairness it’s only $7/mo. – a very wise investment). I am aware of Gitorious like I mentioned in the first part, but I have no experience with that.</description></item><item><title>Gitosis and Gitweb - Part 2 - Add Projects and Contributors</title><link>http://jmeridth.com/posts/gitosis-and-gitweb-part-2/</link><pubDate>Tue, 25 May 2010 03:02:00 -0500</pubDate><guid>http://jmeridth.com/posts/gitosis-and-gitweb-part-2/</guid><description>Gitosis and Gitweb – Part 1
So we are setup now thanks to Part 1.
Gitosis repository contents Link to heading If we issue the “find .” command locally inside the gitosis-admin directory we will see the following:
~/gitosis-admin(master) &amp;gt; find . &amp;lt;a bunch of files from .git folder) ./gitosis.conf ./keydir ./keydir/user@local.pub We have the .git folder, a gitosis.conf file, and a keydir with a pub key file.
Add our first project Link to heading Our project name for this example is lostechies.</description></item><item><title>Gitosis and Gitweb - Part 1 - Setup</title><link>http://jmeridth.com/posts/gitosis-and-gitweb-part-1/</link><pubDate>Tue, 25 May 2010 02:42:00 -0500</pubDate><guid>http://jmeridth.com/posts/gitosis-and-gitweb-part-1/</guid><description>I’ve had a number of people ask me where they should host their Git repositories. Of course, my default question back is, “Can the code be public or does it need to be private?”. Usually they say, “public”. Therefore, my repsonse is Github.com. If they say, “private” I still say Github. If they don&amp;rsquo;t &amp;ldquo;trust&amp;rdquo; Github, which they should - click the link, then my response is Gitosis and Gitweb. This is by no means the only solution.</description></item><item><title>My "Git Branching and Workflows" presentation at Austin Code Camp 2010</title><link>http://jmeridth.com/posts/my-git-branching-and-workflows-presentation-at-austin-code-camp-2010/</link><pubDate>Mon, 24 May 2010 13:40:00 -0500</pubDate><guid>http://jmeridth.com/posts/my-git-branching-and-workflows-presentation-at-austin-code-camp-2010/</guid><description>Thanks to Shawn Weisfeld for recording this presentation. Enjoy.</description></item><item><title>Seeing which Git branch I'm on via my console prompt (__git_ps1)</title><link>http://jmeridth.com/posts/seeing-which-git-branch-i-m-on-via-my-console-prompt-git-ps1/</link><pubDate>Sun, 23 May 2010 02:55:00 -0500</pubDate><guid>http://jmeridth.com/posts/seeing-which-git-branch-i-m-on-via-my-console-prompt-git-ps1/</guid><description>I like knowing which Git branch I’m currently in. I use the git-ps1 function feature that comes with git-core. If you clone or download the git source:
git://git.kernel.org/pub/scm/git/git.git There is a file in the contrib/completion folder called git-prompt.sh:
~/code/git/contrib/completion(master) &amp;gt; ls total 96 -rwxr-xr-x 1 user staff 44K Apr 14 15:26 git-prompt.sh I copy this file to my $HOME folder as .git-prompt.sh and then reference it and the ps1 propt feature in my .</description></item><item><title>Pro Git Cliff Notes</title><link>http://jmeridth.com/posts/pro-git-cliff-notes/</link><pubDate>Mon, 05 Apr 2010 04:17:00 -0500</pubDate><guid>http://jmeridth.com/posts/pro-git-cliff-notes/</guid><description>These are my notes from reading Scott Chacon’s Pro Git I highly suggest buying this book if you are serious about using the Git version control tool. pg 48 A branch in Git is simply a lightweight movable pointer pg 50 a special pointer called HEAD…is a pointer to the local branch you’re currently on pg 52 Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).</description></item><item><title>Git reset, checkout &amp; "bare double dash", and revert</title><link>http://jmeridth.com/posts/git-reset-checkout-bare-double-dash-revert/</link><pubDate>Tue, 23 Mar 2010 21:29:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-reset-checkout-bare-double-dash-revert/</guid><description>UPDATE: Please make sure to read Alexander&amp;rsquo;s comments on git rebase --interactive
UPDATE: If you need to unstage a file prior to your first commit:
git rm --cached filename Thanks to Sean Chambers for tweeting about this
Some of the common questions I get are about how to reset or revert changes in Git. There are two typical scenarios you have to deal with. One is if you haven’t committed the code yet.</description></item><item><title>Suspicious Patch Lines</title><link>http://jmeridth.com/posts/suspicious-patch-lines/</link><pubDate>Sat, 27 Feb 2010 19:21:00 -0600</pubDate><guid>http://jmeridth.com/posts/suspicious-patch-lines/</guid><description>DISCLAIMER: This is only relevant if you or someone contributing to your project are doing cross-platform development. If you are typically just developing on Windows, you should be able to keep the config options set to false.
The Problem Link to heading While trying to commit changes to a file I have under source control with Git on a Windows box using cygwin, I received the following error:
jmeridth@web1 /cygdrive/d/site $ git commit -am &amp;#34;changed the README to show authors&amp;#34; * * You have some suspicious patch lines: * * In README * trailing whitespace (line 26) README:26: This type of error has been discussed quite a bit amongst .</description></item><item><title>Git For Windows Developers – Git Series – Part 4</title><link>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-4/</link><pubDate>Sat, 20 Jun 2009 04:15:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-4/</guid><description>ROUGH DRAFT - NOT READY FOR RELEASE OR REVIEW Link to heading This post is on TortoiseGit. For those that may be unaware, there is a very popular tool called TortoiseSVN that integrates with the Windows Explorer and allows a Windows User to graphically manage a Subversion repository. Well, some developers decided to port that tool over to TortoiseGit.
**Note:**I personally think that it’s funny that Google Code seems to be the place this code is hosted.</description></item><item><title>Git For Windows Developers – Git Series – Part 3</title><link>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-3/</link><pubDate>Mon, 08 Jun 2009 02:45:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-3/</guid><description>Git For Windows Developers - Git Series - Part 1
Git For Windows Developers - Git Series - Part 2
Git For Windows Developers - Git Series - Part 3
THE .GIT FOLDER Link to heading Note: The SHA1s acategory in this post are unique to my system. The examples with SHA1s will not work on your system if you try the commands verbatim. The commands that ucategory will work if you name yocategory the same.</description></item><item><title>Git For Windows Developers – Git Series – Part 2</title><link>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-2/</link><pubDate>Thu, 04 Jun 2009 05:49:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-2/</guid><description>Git For Windows Developers - Git Series - Part 1
Git For Windows Developers - Git Series - Part 2
Git For Windows Developers - Git Series - Part 3
_UPDATE: I no longer use the “git pull –squash…” workflow. I use git rebase -i aka interactive rebase. There are plenty of docs out there on this so please look into it before reading this post.
Please make sure you’ve read the first post and have created your SSH private and public keys.</description></item><item><title>Git For Windows Developers – Git Series - Part 1</title><link>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-1/</link><pubDate>Mon, 01 Jun 2009 06:04:00 -0500</pubDate><guid>http://jmeridth.com/posts/git-for-windows-developers-git-series-part-1/</guid><description>UPDATE: I’ve updated the msysgit installation screens so they are more current. Git-1.7.7.1 is the latest one as of this update. The subsequent screens show Git-1.6.3. I assure you that all of the commands in the first three parts of this series will work on 1.6.3.
Git For Windows Developers - Git Series - Part 1
Git For Windows Developers - Git Series - Part 2
Git For Windows Developers - Git Series - Part 3</description></item></channel></rss>