<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Net on Learn, Converse, Share</title><link>http://jmeridth.com/tags/.net/</link><description>Recent content in .Net on Learn, Converse, Share</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 12 Apr 2012 00:00:00 -0500</lastBuildDate><atom:link href="http://jmeridth.com/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>NuGet Dependency Versioning and Log4net 1.2.11</title><link>http://jmeridth.com/posts/nuget-dependency-versioning-and-log4net-1.2.11</link><pubDate>Thu, 12 Apr 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/nuget-dependency-versioning-and-log4net-1.2.11</guid><description>&lt;p&gt;Yesterday I got bit in the butt with the now infamous new key for strong naming of log4net 1.2.11 situation. We wrote our nuspec file to have a depdency on log4net, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;dependency&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;log4net&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;1.2.10&amp;#34;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, to NuGet that means that we allow version 1.2.10 OR greater. Well, since version 1.2.11 had the strong naming change, that caused us dependency issues. We needed to roll back to log4net 1.2.10. The easiest course of action was to learn how to tell the nuspec file that the dependency version we list is the only one we want. I found that information here. We needed to use the brackets. Our nuspec dependencies simply changed to:&lt;/p&gt;</description></item><item><title>How to Capture the Exception Message From Assert.Throws in NUnit</title><link>http://jmeridth.com/posts/how-to-capture-exception-message-from-assert-throws-in-nunit/</link><pubDate>Fri, 23 Mar 2012 00:00:00 -0500</pubDate><guid>http://jmeridth.com/posts/how-to-capture-exception-message-from-assert-throws-in-nunit/</guid><description>&lt;p&gt;In the past I’ve used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="na"&gt;[ExpectedException(typeof(CustomException), ExpectedMessage=&amp;#34;blah blah blah&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to set an exception expectation and assert on the message. With the recent releases of NUnit I’ve finally transitioned all my code to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Throws&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CustomException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;someType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Throws&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CustomException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;someType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if the method has no parameters.&lt;/p&gt;
&lt;p&gt;Only lately have I needed to capture the exception message and validate it. To do this you do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Throws&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CustomException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;someType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;That&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;expected message here&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I am blogging about this because I keep forgetting how to capture the exception message. Hope it helps someone else.&lt;/p&gt;</description></item><item><title>Opportunity</title><link>http://jmeridth.com/posts/opportunity/</link><pubDate>Sat, 04 Jun 2011 06:06:10 -0500</pubDate><guid>http://jmeridth.com/posts/opportunity/</guid><description>&lt;p&gt;I’ve been in major transition the last couple months. I decided to leave San Antonio and head to Dallas to work with Joe (&lt;a href="https://twitter.com/agilejoe" class="external-link" target="_blank" rel="noopener"&gt;@agilejoe&lt;/a&gt;) and Marcus (&lt;a href="https://twitter.com/marcusthebold" class="external-link" target="_blank" rel="noopener"&gt;@marcusthebold&lt;/a&gt;), both are fellow LosTechies members, at &lt;a href="https://onetechnologies.net" class="external-link" target="_blank" rel="noopener"&gt;One Technologies&lt;/a&gt;. Unfortunately, I’m heading back to San Antonio for personal reasons and would love to help fill the gap I’m leaving. Any other Alt.NET developers who love working at a fast pace, with smart people, on interesting products, should ping Joe or Marcus with your resume.&lt;/p&gt;</description></item></channel></rss>